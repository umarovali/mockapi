// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StaffShift {
  MORNING
  DAY
  NIGHT
}

enum AppointmentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CARD
  CASH
  ONLINE
}

enum RiskLevel {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum LastVisitType {
  EMERGENCY
  FOLLOWUP
  CONSULTATION
  MENTAL_HEALTH
  CHECKUP
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
}

enum MedicineType {
  TABLET
  SYRUP
  INJECTION
  CAPSULE
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  PATIENT
  DOCTOR
  STAFF
  OWNER
}


model User {
  id                   Int            @id @default(autoincrement())
  full_name            String
  phone                String
  email                String         @unique
  hashed_password      String
  hashed_refresh_token String?
  gender               String
  birth_date           DateTime
  is_active            Boolean        @default(false)
  role                 Role
  activation_link      String?        @unique
  appointments         Appointment[]
  notifications        Notification[]
  payments             Payment[]
  doctor               Doctor[]
  staff               Staff[]

  @@map("users")
}

model Doctor {
  id          Int           @id @default(autoincrement())
  specialty   String
  experience  Int
  hired_date  DateTime
  gender      Gender
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  appointment Appointment[]
}

model Staff {
  id          Int           @id @default(autoincrement())
  shift   StaffShift
  posititon  String
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
}

model Admin {
  id                   Int     @id @default(autoincrement())
  name                 String
  email                String  @unique
  hashed_password      String
  hashed_refresh_token String?
  is_active            Boolean @default(true)
  is_creator           Boolean @default(false)

  @@map("admin")
}

model Appointment {
  id               Int               @id @default(autoincrement())
  patientId        Int
  reserved_date    DateTime
  doctorId         Int
  status           AppointmentStatus
  patient          User              @relation(fields: [patientId], references: [id])
  doctor           Doctor            @relation(fields: [doctorId], references: [id])

  @@map("appointment")
}

model Prescriptions {
  id                 Int                     @id @default(autoincrement())
  reason             String
  solution           String
  treatmentId        Int?
  requires_treatment Boolean?
  treatment          Treatments?             @relation(fields: [treatmentId], references: [id])
  medicines          Medicines[]

  @@map("prescription")
}

model Medicines {
  id            Int                     @id @default(autoincrement())
  type          MedicineType
  prescriptionId Int

  name          String
  ingredients   String

  prescription   Prescriptions @relation(fields: [prescriptionId], references: [id])


  @@map("medicines")
}

model Treatments {
  id            Int            @id @default(autoincrement())
  type          String
  price         Decimal
  advantage     String
  conditions    String
  prescriptions Prescriptions[]
  payments      Payment[]

  @@map("treatments")
}

model Payment {
  id             Int           @id @default(autoincrement())
  treatmentId    Int
  payment_date   DateTime
  payment_method PaymentMethod
  status         PaymentStatus
  patientId      Int
  amount         Decimal
  treatment      Treatments    @relation(fields: [treatmentId], references: [id])
  patient        User          @relation(fields: [patientId], references: [id])

  @@map("payments")
}

model Notification {
  id            Int     @id @default(autoincrement())
  read          Boolean
  message       String
  notified_date String
  userId        Int
  user          User    @relation(fields: [userId], references: [id])

  @@map("notifications")
}

